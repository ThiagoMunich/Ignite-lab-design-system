{"version":3,"file":"Button.bae91431.js","sources":["../../src/components/Button/Button.tsx"],"sourcesContent":["import { ButtonHTMLAttributes, ReactNode } from \"react\"\n\nimport { clsx } from \"clsx\"\nimport { Slot } from \"@radix-ui/react-slot\"\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  children: ReactNode\n  asChild?: boolean\n  className?: string\n  color?: \"primary\" | \"error\"\n  variant?: \"contained\" | \"outlined\"\n}\n\nexport function Button({\n  asChild,\n  children,\n  className,\n  color = \"primary\",\n  variant = \"contained\",\n  ...props\n}: ButtonProps) {\n  const Comp = asChild ? Slot : \"button\"\n\n  const buttonStyle = () => {\n    let defaultStyle =\n      \"font-sans font-semibold px-4 py-3 rounded text-sm w-full transition-colors focus:ring-2 ring-white\"\n\n    if (props?.disabled) {\n      return `${defaultStyle} text-black bg-gray-400 opacity-75`\n    } else if (color === \"error\") {\n      return variant === \"contained\"\n        ? `${defaultStyle} text-white bg-red-600 hover:bg-red-500`\n        : `${defaultStyle} text-red-500 bg-transparent ring-2 ring-red-500`\n    } else {\n      return variant === \"contained\"\n        ? `${defaultStyle} text-black bg-cyan-500 hover:bg-cyan-300`\n        : `${defaultStyle} text-cyan-300 bg-transparent ring-2 ring-cyan-500`\n    }\n  }\n\n  return (\n    <Comp className={clsx(buttonStyle(), className)} {...props}>\n      {children}\n    </Comp>\n  )\n}\n"],"names":["Button","asChild","children","className","variant","props","_jsx","Slot","clsx","__name","defaultStyle"],"mappings":"qNAaO,SAAAA,EAAA,CAAgB,QAAAC,EACrBA,SAAAA,EACAC,UAAAA,EACAC,MAAAA,EAAAA,UACQ,QAAAC,EAAA,eACEC,CAEC,EAAA,CAoBX,OAAAC,EAnBAL,EAAAM,EAAA,SAmBA,CACO,UAAAC,EAlBPC,EAAA,IAAA,CACE,IAAAC,EAAA,qGAGA,OAAAL,GAAA,MAAAA,EAAA,SACE,GAAAK,sCAAUA,IAAAA,QAEVN,IAAA,YAAA,GAAAM,2CAAA,GAAAA,oDAIAN,IAAA,YAAA,GAAAM,6CAAA,GAAAA,qDAGF,EAdF,eAkBO,EAAAP,CAAA,EAAyC,GAAAE,EAAOA,SAAAA,CAAK,CAAA,CAI9D,CAhCOI,EAAAT,EAAA"}